import { QuestionsType } from "../types/types";

export const questions: QuestionsType = [
  {
    id: 1,
    question: "Какие типы данных существуют в javascript?",
    answer:
      "Подробнее - Типы данных 1)Числа – Number 2)Строки – String 3)Логический тип – Boolean. 4)Object – обычный JavaScript объект 5) null - это просто специальное значение, которое представляет собой «ничего», «пусто» или «значение неизвестно». 6)undefined - означает, что «значение не было присвоено». Если переменная объявлена, но ей не присвоено никакого значения, то её значением будет undefined. 7)Symbol - это уникальный и неизменяемый тип данных, который может быть использован как идентификатор для свойств объектов. Символы гарантированно уникальны. Даже если мы создадим множество символов с одинаковым описанием, это всё равно будут разные символы. Описание – это просто метка, которая ни на что не влияет. 8)BigInt - используется для создания больших чисел. const bigInt = 1234567890123456789012345678901234567890n",
  },
  {
    id: 2,
    question: "Что такое Symbol",
    answer:
      "Symbol в JavaScript - примитивный тип данных Он представляет собой уникальное и неизменяемое значение, которое может быть использовано в качестве идентификатора или ключа для свойства объекта. 1. Уникальность: Каждое значение Symbol уникально. Это означает, что даже если создать два Symbol с одинаковым описанием, они все равно будут разными. 2. Неизменяемость: Значение Symbol не может быть изменено после его создания. Это гарантирует, что Symbol сохраняет свою уникальность и неповторимость. 3. Использование в качестве ключей: Одним из основных применений Symbol является использование его в качестве ключей для свойств объекта. Когда Symbol используется в качестве ключа, он не пересекается с другими ключами, такими как строки или числа, и не вызывает конфликтов. 4. Невидимость в циклах: Свойства объекта, ключом которых является Symbol, не появляются в циклах for...in или for...of, а также не включаются в операции Object.keys() или Object.getOwnPropertyNames(). Это позволяет создавать скрытые или приватные свойства объекта. 5. Встроенные символы: В JavaScript также предопределены некоторые встроенные символы, такие как Symbol.iterator, Symbol.toStringTag и другие. Они используются для определенных целей, например, чтобы указать, что объект может быть итерируемым или для изменения строки, возвращаемой методом toString(). Symbol предоставляет возможность создавать уникальные и неизменяемые идентификаторы, которые не будут конфликтовать с другими значениями. Это полезный инструмент для работы с объектами и создания различных паттернов в JavaScript.",
  },
  {
    id: 3,
    question: "Какие есть способы объявить переменную и чем они отличаются",
    answer:
      "Объявить переменную можно 4 способами 1.a = 5; 2.var a = 5; 3.let a = 5; 4.const a = 5; 2ой способ с помощью ключевого слова var и он аналогичен первому. Переменные обьявленные таким способом имеют глобальную или функциональную область видимости и не имеют блочную, что является большим минусом. Такой способ объявления является устаревшим. Let и const являются предпочтительным способом обьявить переменную, имеют блочную область видимости, т.е объявленная внутри, например, блока if переменная не будет видна снаружи, const является неизменяемым, но если это объект, то можно менять поля, если это массив то можно менять или добавлять элементы в массив.",
  },
  {
    id: 4,
    question:
      "Стрелочные функции и их отличие от функций, объявленных через function",
    answer:
      "Подробнее - Стрелочные функции •        Стрелочные функции не имеют argumemts. Объект arguments — это подобный массиву объект, который содержит аргументы, переданные в функцию. Объект arguments - это локальная переменная, доступная внутри любой (нестрелочной) функции. Объект arguments позволяет ссылаться на аргументы функции внутри неё. Он состоит из переданных в функцию аргументов, индексация начинается с 0. function func1(a, b, c) { console.log(arguments[2]); // Expected output: 3 } func1(1, 2, 3); •        Синтаксис •        У стрелочных функций нет своего this. Если идет обращение к this, то он берется снаружи. •        Не могут быть функциями – конструкторами. Т.е не могут вызываться с помощью new. Конструктор - это функция, которая создает пустой объект и определяет его свойства и методы. Т.е. конструктор наполняет пустой объект данными.",
  },
  {
    id: 5,
    question: "Что такое замыкание?",
    answer:
      "7. Что такое замыкание? Подробнее - Замыкания Замыкание – это функция вместе со всеми внешними переменными, которые ей доступны. Грубо говоря, на примере, есть функция, которая имеет вложенную функцию, и вложенная функция будет замыкать и сохранять в себе переменные из родительской. function parent() { const a = 5; return function child() { console.log(a); // child замыкает в себе переменную a; } } Замыкание – это функция, которая запоминает свои внешние переменные и может получить к ним доступ. в JavaScript, все функции изначально являются замыканиями (есть только одно исключение, про которое будет рассказано в Синтаксис new Function).То есть они автоматически запоминают, где были созданы, с помощью скрытого свойства [[Environment]], и все они могут получить доступ к внешним переменным.Все функции «при рождении» получают скрытое свойство [[Environment]], которое ссылается на лексическое окружение места, где они были созданы.",
  },
  {
    id: 6,
    question: "Что такое Set и Map?",
    answer:
      "Map Map – это коллекция ключ/значение, как и Object. Но основное отличие в том, что Map позволяет использовать ключи любого типа. Методы и свойства: new Map() – создаёт коллекцию. map.set(key, value) – записывает по ключу key значение value. map.get(key) – возвращает значение по ключу или undefined, если ключ key отсутствует. map.has(key) – возвращает true, если ключ key присутствует в коллекции, иначе false. map.delete(key) – удаляет элемент (пару «ключ/значение») по ключу key. map.clear() – очищает коллекцию от всех элементов. map.size – возвращает текущее количество элементов. Перебор Map Для перебора коллекции Map есть 3 метода: map.keys() – возвращает итерируемый объект по ключам, map.values() – возвращает итерируемый объект по значениям, map.entries() – возвращает итерируемый объект по парам вида [ключ, значение], этот вариант используется по умолчанию в for..of. Map – это коллекция, структура данных, работающая по принципу ключ/значение, как и Object. Но основное отличие от объекта в том, что Map позволяет использовать ключи любого типа. Объект Set – это особый вид коллекции: «множество» значений (без ключей), своего рода массив, где каждое значение может появляться только один раз. ",
  },
  {
    id: 7,
    question: "Как определить наличие свойства в объекте?",
    answer:
      "10. Как определить наличие свойства в объекте? Подробнее - hasOwnProperty Первый способ - с помощью функции hasOwnProperty, который есть у каждого обьекта. Второй способ с помощью оператора in. С использованием этого оператора надо быть осторожным, так проверяются по цепочке все прототипы. ",
  },
];

/* 
  {
    id: ,
    question: "",
    answer:
      "",
  },
*/
